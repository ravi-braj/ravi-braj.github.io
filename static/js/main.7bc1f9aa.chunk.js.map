{"version":3,"sources":["webpack:///./src/index.less?e857","index.less","assets/palantir.svg","assets/qwilr.svg","assets/unsw.png","components/Splash.tsx","components/GalleryTile.tsx","assets/experience.js","components/Gallery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","___CSS_LOADER_GET_URL_IMPORT___","___CSS_LOADER_URL_IMPORT_0___","___CSS_LOADER_URL_IMPORT_1___","___CSS_LOADER_URL_IMPORT_2___","___CSS_LOADER_URL_REPLACEMENT_0___","___CSS_LOADER_URL_REPLACEMENT_1___","___CSS_LOADER_URL_REPLACEMENT_2___","push","Splash","className","React","GalleryTile","this","props","logo","name","description","experiences","Gallery","map","exp","key","renderExperiences","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+HAAA,IAAIA,EAAM,EAAQ,IACFC,EAAU,EAAQ,IAIC,kBAFvBA,EAAUA,EAAQC,WAAaD,EAAQE,QAAUF,KAG/CA,EAAU,CAAC,CAACG,EAAOC,EAAIJ,EAAS,MAG9C,IAAIK,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEPN,EAAIC,EAASK,GAI1BF,EAAOG,QAAUN,EAAQO,QAAU,I,iBCjBnC,IAAIC,EAA8B,EAAQ,IACtCC,EAAkC,EAAQ,IAC1CC,EAAgC,EAAQ,IACxCC,EAAgC,EAAQ,IACxCC,EAAgC,EAAQ,IAC5CN,EAAUE,GAA4B,GACtC,IAAIK,EAAqCJ,EAAgCC,GACrEI,EAAqCL,EAAgCE,GACrEI,EAAqCN,EAAgCG,GAEzEN,EAAQU,KAAK,CAACb,EAAOC,EAAI,0hCAA4hCS,EAAqC,kIAAoIC,EAAqC,iIAAmIC,EAAqC,gqBAAiqB,KAE5kEZ,EAAOG,QAAUA,G,kBCbjBH,EAAOG,QAAU,IAA0B,sC,gBCA3CH,EAAOG,QAAU,IAA0B,mC,gBCA3CH,EAAOG,QAAU,IAA0B,kC,4GCE9BW,EAAb,uKAGQ,OACI,uBAAKC,UAAU,oBACX,uBAAKA,UAAU,gBACX,6CACA,uEAPpB,GAA4BC,iBCMfC,EAAb,uKAGQ,OACI,uBAAKF,UAAU,0BACX,uBAAKA,UAAU,+BACX,uBAAKA,UAAWG,KAAKC,MAAMC,KAAO,sBAC9B,uBAAKL,UAAW,8BAGxB,uBAAKA,UAAU,qBACX,0BAAKG,KAAKC,MAAME,MAChB,4BAAOH,KAAKC,MAAMG,mBAZtC,GAAiCN,iBCRtBO,EAAc,CACvB,CACE,KAAQ,WACR,KAAQ,WACR,YAAe,yBAEjB,CACE,KAAQ,QACR,KAAQ,QACR,YAAe,iBAEjB,CACE,KAAQ,gCACR,KAAQ,OACR,YAAe,mBCVNC,EAAb,kLAGQ,OAAOD,EAAYE,KAAI,SAACC,EAAKzB,GACzB,OACI,gBAAC,EAAD,CACIoB,KAAMK,EAAG,KACTN,KAAMM,EAAG,KACTJ,YAAaI,EAAG,YAChBC,IAAK1B,SATzB,+BAiBQ,OACI,uBAAKc,UAAU,qBACVG,KAAKU,yBAnBtB,GAA6BZ,iBCSda,MATf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bc1f9aa.chunk.js","sourcesContent":["var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js??ref--6-2!./index.less\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_GET_URL_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/getUrl.js\");\nvar ___CSS_LOADER_URL_IMPORT_0___ = require(\"./assets/palantir.svg\");\nvar ___CSS_LOADER_URL_IMPORT_1___ = require(\"./assets/qwilr.svg\");\nvar ___CSS_LOADER_URL_IMPORT_2___ = require(\"./assets/unsw.png\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\n// Module\nexports.push([module.id, \".splash-container {\\n  height: 20rem;\\n  background-color: #465362;\\n  width: 100%;\\n  display: flex;\\n  align-items: center;\\n  flex-direction: column;\\n  padding: 5rem;\\n}\\n.splash-title {\\n  color: #F4FFFD;\\n}\\n.gallery-container {\\n  background-color: rgba(1, 25, 54, 0.1);\\n  display: flex;\\n  align-items: center;\\n  flex-direction: column;\\n  padding: 1rem;\\n  width: 100%;\\n}\\n.gallery-tile-container {\\n  background-color: white;\\n  max-width: 40rem;\\n  width: 100%;\\n  display: flex;\\n  align-items: center;\\n  margin: 1rem;\\n}\\n.gallery-tile-container .gallery-tile-logo-container {\\n  background-color: #011936;\\n  width: 20rem;\\n}\\n.gallery-tile-container .gallery-tile-logo {\\n  padding-bottom: 100%;\\n}\\n.gallery-tile-container .gallery-tile-logo-inner {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n}\\n.gallery-tile-container .gallery-tile-text {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  width: 20rem;\\n}\\n.palantir {\\n  background: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");\\n  background-color: black;\\n  background-size: 100% 100%;\\n  height: 100%;\\n  width: 100%;\\n}\\n.qwilr {\\n  background: url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");\\n  background-color: white;\\n  background-size: 100% 100%;\\n  height: 100%;\\n  width: 100%;\\n}\\n.unsw {\\n  background: url(\" + ___CSS_LOADER_URL_REPLACEMENT_2___ + \");\\n  background-color: white;\\n  background-repeat: no-repeat;\\n  background-size: 80%;\\n  background-position: center;\\n  height: 100%;\\n  width: 100%;\\n}\\n.App {\\n  text-align: center;\\n  background-color: #F4FFFD;\\n  width: 100%;\\n  display: flex;\\n  align-items: center;\\n  flex-direction: column;\\n}\\nbody {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","module.exports = __webpack_public_path__ + \"static/media/palantir.f7555d04.svg\";","module.exports = __webpack_public_path__ + \"static/media/qwilr.2278c7c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/unsw.c9e91a99.png\";","import * as React from \"react\";\n\nexport class Splash extends React.PureComponent<{}, {}> {\n\n    public render() {\n        return (\n            <div className=\"splash-container\">\n                <div className=\"splash-title\">\n                    <h1>My name is Ravi</h1>\n                    <h2>this site is  under construction...</h2>\n                </div>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\n\ninterface IGalleryTile {\n    name: string,\n    logo: string,\n    description: string,\n}\n\nexport class GalleryTile extends React.PureComponent<IGalleryTile, {}> {\n\n    public render() {\n        return (\n            <div className=\"gallery-tile-container\">\n                <div className=\"gallery-tile-logo-container\">\n                    <div className={this.props.logo + \" gallery-tile-logo\"}>\n                        <div className={\"gallery-tile-logo-inner\"}/>\n                    </div>\n                </div>\n                <div className=\"gallery-tile-text\">\n                    <h2>{this.props.name}</h2>\n                    <span>{this.props.description}</span>\n                </div>\n            </div>\n        )\n    }\n}","export var experiences = [\n  {\n    \"name\": \"Palantir\",\n    \"logo\": \"palantir\",\n    \"description\": \"I work here currently\"\n  },\n  {\n    \"name\": \"Qwilr\",\n    \"logo\": \"qwilr\",\n    \"description\": \"I worked here\"\n  },\n  {\n    \"name\": \"University of New South Wales\",\n    \"logo\": \"unsw\",\n    \"description\": \"I studied here\"\n  }\n]","import * as React from \"react\";\nimport {GalleryTile} from \"./GalleryTile\";\nimport {experiences} from \"../assets/experience\";\n\nexport class Gallery extends React.PureComponent<{}, {}> {\n\n    renderExperiences() {\n        return experiences.map((exp, i) => {\n            return (\n                <GalleryTile\n                    name={exp[\"name\"]}\n                    logo={exp[\"logo\"]}\n                    description={exp[\"description\"]}\n                    key={i}\n                />\n            )\n        })\n\n    }\n\n    public render() {\n        return (\n            <div className=\"gallery-container\">\n                {this.renderExperiences()}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Splash} from './components/Splash'\nimport {Gallery} from \"./components/Gallery\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Splash/>\n      <Gallery/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}